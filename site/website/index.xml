<?xml version="1.0" encoding="UTF-8"?>
<page>
	<content-type>/page/globalhome</content-type>
	<display-template>/templates/web/globalhome.ftl</display-template>
	<no-template-required/>
	<merge-strategy>inherit-levels</merge-strategy>
	<placeInNav>false</placeInNav>
	<file-name>index.xml</file-name>
	<internal-name>Home (Global)</internal-name>
	<orderDefault_f>-1</orderDefault_f>
	<objectGroupId>8d7f</objectGroupId>
	<objectId>8d7f21fa-5e09-00aa-8340-853b7db302da</objectId>
	<folder-name/>
	<createdDate>2017-1-31T16:18:14.000Z</createdDate>
	<createdDate_dt>2017-1-31T16:18:14.000Z</createdDate_dt>
	<lastModifiedDate>2021-02-05T16:53:26.727Z</lastModifiedDate>
	<lastModifiedDate_dt>2021-02-05T16:53:26.727Z</lastModifiedDate_dt>
	<title_t>Localization Example</title_t>
	<navLabel>GlobalHome</navLabel>
	<body_html>&lt;h2&gt;Multi-Lingual Support in Crafter CMS 3&lt;/h2&gt;
&lt;h3&gt;Architecture Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crafter Studio 3 has no native concept of translation
&lt;ul&gt;
&lt;li&gt;That doesn't mean that it cannot be built employed using standard design patterns!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does translation support mean?
&lt;ul&gt;
&lt;li&gt;Content must know its language&lt;/li&gt;
&lt;li&gt;Content must be able to identify its translations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This is ultimately done by linking the translations to the source
&lt;ul&gt;
&lt;li&gt;Sometimes this is done by designating a particular language as the "source" and translations contain a reference to the source&lt;/li&gt;
&lt;li&gt;Sometimes this is done by introducing a whole new identifier that is common to both the source and the translation(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crafter Studio 3's approach:
&lt;ul&gt;
&lt;li&gt;Place content in a folder corresponding to its locale&lt;/li&gt;
&lt;li&gt;Linkage between translations is defined by the path - two files in the same location but with different language folders are defined as translations of one another (or at least, dynamic localizations of one another)
&lt;ul&gt;
&lt;li&gt;e.g.
&lt;ul&gt;
&lt;li&gt;These two are translations:&amp;nbsp;
&lt;ul&gt;
&lt;li&gt;/site/website/&lt;strong&gt;en&lt;/strong&gt;/home/index.xml&lt;/li&gt;
&lt;li&gt;/site/website/&lt;strong&gt;en&lt;/strong&gt;/home/index.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;So are these:
&lt;ul&gt;
&lt;li&gt;/site/website/&lt;strong&gt;en&lt;/strong&gt;/style/hats/index.xml&lt;/li&gt;
&lt;li&gt;/site/website/&lt;strong&gt;es&lt;/strong&gt;/style/hats/index.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;But these are not:
&lt;ul&gt;
&lt;li&gt;/site/website/&lt;strong&gt;en&lt;/strong&gt;/style/&lt;strong&gt;hats&lt;/strong&gt;/index.xml&lt;/li&gt;
&lt;li&gt;/site/website/&lt;strong&gt;es&lt;/strong&gt;/style/&lt;strong&gt;argentinian-hats&lt;/strong&gt;/index.xml&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can this be used?
&lt;ul&gt;
&lt;li&gt;Two primary use cases
&lt;ul&gt;
&lt;li&gt;Content Management (i.e. Crafter Studio)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Content Rendering (i.e. Crafter Engine)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Content Management&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manage translations completely independently&lt;/li&gt;
&lt;li&gt;Each content item stands alone - there is no concrete linkage or dependency between content items
&lt;ul&gt;
&lt;li&gt;This is clean and simple, avoiding complicated questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are no built-in tools that will allow you create a "translation" of a content item.
&lt;ul&gt;
&lt;li&gt;To create a translation, right-click on the item you wish to translate, and select "copy", and then "paste" the item in the corresponding folder in the desired locale&lt;/li&gt;
&lt;li&gt;Custom UI plugins can be built to simplify this (e.g. Right-click and select "translate to Spanish", or "view Spanish version")&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relationships are preserved when copying content
&lt;ul&gt;
&lt;li&gt;Depending on your content model, you may wish to re-link related items in the translation.&lt;/li&gt;
&lt;li&gt;e.g. if an article points to a related item, and a translation copy of the article is created, the translated article will keep pointing to the related item in the source language.&amp;nbsp; You will have to create the translation of the related item, and then manually re-link the translated article to the translated item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content management form components are not aware of locale
&lt;ul&gt;
&lt;li&gt;Custom data sources could be constructed to display a subset of "options" based on the locale of the source item&lt;/li&gt;
&lt;li&gt;Custom form controls (specifically the node selector) could indicate the locale of the related content item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Content Rendering&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Crafter Engine has a feature that supports advanced item path manipulation
&lt;ul&gt;
&lt;li&gt;This can be configured to provide translation fallback support, and it is implemented in the Site Item Service.&lt;/li&gt;
&lt;li&gt;If the item in the requested language is not available, Crafter will look for the language in the "fallback" language and return it instead.
&lt;ul&gt;
&lt;li&gt;Thus, if you request an item /site/website/jp/style/index.xml, but no such page exists, Crafter will automatically return /site/website/en/style/index.xml for you.&lt;/li&gt;
&lt;li&gt;The same applies when you look up a component - if you request a component by the path of a translation that does not exist, it will return the fallback language for you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This works for URLs as well
&lt;ul&gt;
&lt;li&gt;URLs are resolved to paths first, so the rules above apply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When calling renderComponent (in Freemarker), or when returning flattened nested components, no fallback is applied.
&lt;ul&gt;
&lt;li&gt;This could be what you want, or not, depending on your use case&lt;/li&gt;
&lt;li&gt;If you need to try to render a translation if found, you need to get the path of the nested component, manually change its path to the one you hope to retrieve and then render that component instead (either in freemarker via headless APIs)&lt;/li&gt;
&lt;li&gt;If you are using headless APIs, don't request flattened objects if you plan to look up nested relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be aware that the default navigation builder and navigation services will return actual pages, not links to&amp;nbsp; pages that "hopefully" exist.&amp;nbsp;
&lt;ul&gt;
&lt;li&gt;You may have to manage your nav bar more explicitly in your code.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Metagenics Global Recommendations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on the proposed architecture, in which:
&lt;ul&gt;
&lt;li&gt;Each website will be managed in its own site in Crafter CMS&lt;/li&gt;
&lt;li&gt;New sites will be "cloned" off a particular master site in English&lt;/li&gt;
&lt;li&gt;Content will be initially all in English&lt;/li&gt;
&lt;li&gt;"Important" content can be translated into the locale-specific language to provide a better experience for local visitors&lt;/li&gt;
&lt;li&gt;No synchronization will be done between English content across regional sites
&lt;ul&gt;
&lt;li&gt;Changes to translatable content are to be minimal and can be communicated through existing marketing channels&lt;/li&gt;
&lt;li&gt;Either English content or translated content will be directly updated by region&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Site will be rendered via Crafter's headless APIs through a common react app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metagenics can utilize the architecture proposed cleanly
&lt;ul&gt;
&lt;li&gt;Because the primary use case is "translating English content into the local language just once", there is no need for linkage between source items&lt;/li&gt;
&lt;li&gt;Weak linking between source and translation is not a problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UI customizations to facilitate creating translations should be created
&lt;ul&gt;
&lt;li&gt;Data Source for Nodes&lt;/li&gt;
&lt;li&gt;Node Selector Form Control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See React site for some technology demonstrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;"&gt;Modifications Made to Editorial Sample Site&lt;/span&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Move content into folders by locale&lt;/li&gt;
&lt;li&gt;Reconfigure sidebar to show locale-specific homes&lt;/li&gt;
&lt;li&gt;&lt;span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;"&gt;Update engine site config and add targeting block. Select merge.&lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Update left-rail to use locale in navigation&lt;/li&gt;
&lt;li&gt;Restrict access to sidebar folders based on the editor's role&lt;/li&gt;
&lt;li&gt;Update targeting system to cause Engine (and the SiteItemService) to load by locale&lt;/li&gt;
&lt;li&gt;&lt;span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;"&gt;Handle old root page&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;create global home page content type&lt;/li&gt;
&lt;li&gt;create instance that welcomes users and lets them select their locale&lt;/li&gt;
&lt;li&gt;create template&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional Customization Opportunities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rewrite main nav to support URLs for pages that don't exist yet&lt;/li&gt;
&lt;li&gt;Custom node selector data source that only presents items in the locale of the parent content item, and that also ensures that new items are stored in the correct location&lt;/li&gt;
&lt;li&gt;Custom node selector form control that displays the locale of the rendered content item.&lt;/li&gt;
&lt;li&gt;Filter search results by locale&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This sample site uses a 2-letter language code. This could be changed for any kind of marker (like an ISO locale code, or otherwise)&lt;/li&gt;
&lt;/ul&gt;</body_html>
</page>